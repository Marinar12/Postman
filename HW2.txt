http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Проверить, что в body приходит правильный string.

pm.test("Body is correct", function () {
    pm.response.to.have.body("This is the first responce from server!ss")
});

http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.

let jsonData = pm.response.json();
console.log(jsonData)

4. Проверить, что name в ответе равно name s request (name вбить руками.)

pm.test("Check name", function () {
        pm.expect(jsonData.name).to.eql("Marina");
});

5. Проверить, что age в ответе равно age s request (age вбить руками.)

pm.test("Check age", function () {
        pm.expect(jsonData.age).to.eql+(36);
});

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)

pm.test("Check salaty", function () {
        pm.expect(jsonData.salary).to.eql+(1000);
});

7. Спарсить request.

let reqData = request.data;
console.log(reqData)

8. Проверить, что name в ответе равно name s request (name забрать из request.)

let reqName = reqData.name

console.log(reqName)

pm.test("Check name", function () {
        pm.expect(jsonData.name).to.eql(reqName);
});

9. Проверить, что age в ответе равно age s request (age забрать из request.)

let reqAge = reqData.age

console.log(reqAge)

pm.test("Check age", function () {
        pm.expect(jsonData.age).to.eql+(reqAge);
});

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

let reqSalary = +reqData.salary

console.log(reqSalary)

pm.test("Check salary", function () {
        pm.expect(jsonData.salary).to.eql(reqSalary);
});

11. Вывести в консоль параметр family из response.

let respFamily = jsonData.family

console.log(respFamily)

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

let respU_salary_1_5_year = respFamily.u_salary_1_5_year

console.log(respU_salary_1_5_year)

pm.test("Check u_salary_1_5_year", function () {
        pm.expect(respU_salary_1_5_year).to.eql(reqSalary*4);
});


http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.

let jsonData = pm.response.json()

4. Спарсить request.

let reqUrl = pm.request.url.query.toObject()

console.log(reqUrl)

5. Проверить, что name в ответе равно name s request (name забрать из request.)

let reqName = reqUrl.name

pm.test("Check name", function () {
    pm.expect(reqUrl.name).to.eql(reqName);
});

6. Проверить, что age в ответе равно age s request (age забрать из request.)

let reqAge = reqUrl.age

pm.test("Check age", function () {
    pm.expect(reqUrl.age).to.eql(reqAge);
})


7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

let reqSalary = reqUrl.salary

pm.test("Check salary", function () {
    pm.expect(reqUrl.salary).to.eql(reqSalary);
})

8. Вывести в консоль параметр family из response.

let respFamily = jsonData.family

console.log(respFamily)

9. Проверить, что у параметра dog есть параметры name.

let repsPets = respFamily.pets;
let respDog = repsPets.dog 

pm.test("Dog has name", function () {
    pm.expect(JSON.stringify(respDog)).to.include("name");
});

10. Проверить, что у параметра dog есть параметры age.

pm.test("Dog has age", function () {
    pm.expect(JSON.stringify(respDog)).to.include("age");
});

11. Проверить, что параметр name имеет значение Luky.

pm.test("Check dog name", function () {
        pm.expect(respDog.name).to.eql("Luky");
});

12. Проверить, что параметр age имеет значение 4.

pm.test("Check dog age", function () {
        pm.expect(respDog.age).to.eql(4);
});


http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.

let jsonData = pm.response.json();

4. Спарсить request.

let reqUrl = pm.request.url.query.toObject();

5. Проверить, что name в ответе равно name s request (name забрать из request.)

let reqName = reqUrl.name

pm.test("Check name", function () {
    pm.expect(jsonData.name).to.eql(reqName);
});
6. Проверить, что age в ответе равно age из request (age забрать из request.)

let reqAge = +reqUrl.age

pm.test("Check age", function () {
    pm.expect(jsonData.age).to.eql(reqAge);
});

7. Вывести в консоль параметр salary из request.

let reqSalary = reqUrl.salary

console.log(reqSalary)

8. Вывести в консоль параметр salary из response.

console.log(jsonData.salary)

9. Вывести в консоль 0-й элемент параметра salary из response.

let respSalary = jsonData.salary

console.log(respSalary[0])

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.

console.log(+respSalary[1])

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.

console.log(+respSalary[2])

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)

pm.test("personal salary 0", function () {
    pm.expect(respSalary[0]).to.eql(+reqSalary);
});

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)

pm.test("personal salary 1", function () {
    pm.expect(+respSalary[1]).to.eql(reqSalary*2);
});

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)

pm.test("personal salary 2", function () {
    pm.expect(+respSalary[2]).to.eql(reqSalary*3);
});

15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name

pm.environment.set("name", jsonData.name);

19. Передать в окружение переменную age

pm.environment.set("age", jsonData.age);

20. Передать в окружение переменную salary

pm.environment.set("salary", jsonData.salary)

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.